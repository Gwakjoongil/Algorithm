//벨트, 로봇 회전에 신경만 쓰면 됨. 문제 자체의 난이도는 막 높진 않았다.(근데 회전 잘못하면 디버깅 못함ㅋㅋㅋ 개헬이었음.GPTLove..)
#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>;
#include <cstdlib>
using namespace std;

int main() {
	//n - 내리는 위치, k - 종료 0 갯수

	int n, k;
	vector<int> frontRail;
	vector<int> tailRail;
	int tmp;
	cin >> n >> k;

	for (int i = 0; i < n; i++) {
		cin >> tmp;
		frontRail.push_back(tmp);
	}

	for (int i = 0; i < n; i++) {
		cin >> tmp;
		tailRail.push_back(tmp);
	}

	reverse(tailRail.begin(), tailRail.end());

	int zeroCount;
	int step=0;
	vector<int> frontRobot(frontRail.size(), 0);

	while (true) {
		//1. 벨트 회전
		tmp = frontRail[n - 1];
		for (int i = frontRail.size() - 1; i > 0; i--) {
			frontRail[i] = frontRail[i - 1];
		}
		frontRail[0] = tailRail[0];
		for (int i = 0; i < tailRail.size() - 1; i++) {
			tailRail[i] = tailRail[i + 1];
		}
		tailRail[n - 1] = tmp;
		
		//1. 로봇 회전
		for (int i = frontRobot.size() - 1; i > 0; i--) {
			frontRobot[i] = frontRobot[i - 1];
		}
		frontRobot[0] = 0;
		frontRobot[n - 1] = 0;

		//로봇 1칸씩 이동
		//이동하는 칸의 내구도 > 0 && 이동하는 칸에 로봇이 없어야 함
		for (int i = frontRobot.size() - 1; i > 0; i--) {
			if (frontRail[i] > 0 && frontRobot[i] == 0 && frontRobot[i-1] > 0) {
				frontRail[i]--;
				swap(frontRobot[i], frontRobot[i - 1]);
			}
		}
		frontRobot[0] = 0;
		frontRobot[n - 1] = 0;

		if (frontRail[0] > 0) {
			frontRobot[0] = 1;
			frontRail[0]--;
		}

		step++;
		zeroCount = 0;

		for (int i = 0; i < frontRail.size(); i++) {
			if (frontRail[i] == 0) {
				zeroCount++;
			}
			if (tailRail[i] == 0) {
				zeroCount++;
			}
		}

		if (zeroCount >= k) break;
	}
	cout << step;
	return 0;
}
