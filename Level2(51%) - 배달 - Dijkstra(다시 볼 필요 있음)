#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;
vector<pair<int,int>> v[55];
vector<int> dis;
void Dijkstra(int n){
    priority_queue<pair<int, int>> pq;
    pq.push(make_pair(0,1));
    dis[1]=0;
    
    while(!pq.empty()){
        int cost = -pq.top().first;
        int cur=pq.top().second;
        pq.pop();
        for(int i=0;i<v[cur].size();i++){
            int next = v[cur][i].first;
            int nCost = v[cur][i].second;
            
            if(dis[next] > cost + nCost){
                dis[next] = cost + nCost;
                pq.push(make_pair(-dis[next], next));
            }
        }
    }
}

int solution(int N, vector<vector<int> > road, int K) {
    int answer=0;
    sort(road.begin(), road.end());
    
    dis.resize(N+1, 2e9);
    
    for(int i=0;i<road.size();i++){
        v[road[i][0]].push_back(make_pair(road[i][1], road[i][2]));
        v[road[i][1]].push_back(make_pair(road[i][0], road[i][2]));
    }
    Dijkstra(N);
    
    for(int i=1;i<=N;i++){
        if(dis[i] <= K) answer++;
    }
    
    
    return answer;
}
