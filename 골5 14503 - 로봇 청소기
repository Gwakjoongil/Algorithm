//이 문제는 그냥 단순 구현
//헷갈려하지만 않으면 됨.
//ㅋㅋ1이 벽이 아니라 청소된 구역인줄 알고 엄청 헤맴..ㅋ

#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>;
using namespace std;

int main() {
	int n, m;

	int r, c, dir;

	vector<vector<int>> vec;
	vector<int> tmpvec;
	int tmp;

	cin >> n >> m;
	cin >> r >> c >> dir;


	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> tmp;
			tmpvec.push_back(tmp);
		}
		vec.push_back(tmpvec);
		tmpvec.clear();
	}

	queue<pair<pair<int, int>, int>>  q;

	q.push(make_pair(make_pair(r, c), dir));
	
	int cx, cy, cdir;
	int count = 0;
	count++;
	//int nx[4] = { -1, 0, 1, 0 }; //북 동 남 서
	//int ny[4] = { 0, 1, 0, -1 }; //0  1  2  3
	vector<int> nx;
	vector<int> ny;
	vector<int> ndir;
	int chflag;

	int bx = 0, by = 0;

	while (!q.empty()) {
		cx = q.front().first.first;
		cy = q.front().first.second;
		cdir = q.front().second;
		chflag = 0;
		q.pop();

		vec[cx][cy] = 2;


		//현재 방향에서의 반시계 순서
		switch (cdir)
		{
		case 0:
			nx = { 0, 1, 0, -1 }; //서 남 동 북
			ny = { -1, 0, 1, 0 }; //3  2  1 0
			ndir = { 3,2,1,0 };
			break;
		case 1:
			nx = { -1, 0, 1, 0 }; //북 서 남 동
			ny = { 0, -1, 0, 1 }; //0  3  2  1
			ndir = { 0,3,2, 1 };
			break;
		case 2:
			nx = { 0, -1, 0, 1 }; //동 북 서 남
			ny = { 1, 0, -1, 0 }; // 1  0  3  2
			ndir = { 1,0,3,2 };
			break;
		case 3:
			nx = { 1, 0, -1, 0 }; //남 동 북 서
			ny = { 0, 1, 0, -1 }; // 2  1  0 3
			ndir = { 2,1,0, 3 };
			break;
		default:
			break;
		}

		//청소되지 않은 빈 칸이 있는 곳 찾기
		for (int i = 0; i < 4; i++) {
			if (cx + nx[i] >= 0 && cx + nx[i] < n
				&& cy + ny[i] >= 0 && cy + ny[i] < m
				//&& visited[cx + nx[i]][cy + ny[i]] == 0
				&& vec[cx + nx[i]][cy + ny[i]] == 0) {
				//visited[cx + nx[i]][cy + ny[i]] = 1;
				chflag = 1;
				q.push(make_pair(make_pair(cx + nx[i], cy + ny[i]), ndir[i]));
				count++;
				break;
			}
		}

		//빈 칸이 있었다면 그 곳에서 다시 확인
		if (chflag == 1) {
			continue;
		}

		//여기서부터는 갈 곳이 없는 경우
		switch (cdir)
		{
		case 0:
			bx = 1;
			by = 0;
			break;
		case 1:
			bx = 0;
			by = -1;
			break;
		case 2:
			bx = -1;
			by = 0;
			break;
		case 3:
			bx = 0;
			by = 1;
			break;
		default:
			break;
		}

		if (cx + bx >= 0 && cx + bx < n
			&& cy + by >= 0 && cy + by < m
			&& vec[cx + bx][cy + by] != 1) {
			q.push(make_pair(make_pair(cx + bx, cy + by), cdir));
		}
	}
	cout << count<<endl;

	return 0;
}
