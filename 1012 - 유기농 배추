//BFS
#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

int main() {

	int t, m, n, k;

	int nx[4] = { 0,1,0,-1 };
	int ny[4] = { 1,0,-1,0 };

	int tmpa, tmpb;
	int cx, cy;
	cin >> t;
	for (int i = 0; i < t; i++) {
		queue<pair<int, int>> q;
		cin >> m >> n >> k;
		int count = 0;
		int vec[51][51] = { 0 };
		int visit[51][51] = { 0 };
		for (int ii = 0; ii < k; ii++) {
			cin >> tmpa >> tmpb;
			vec[tmpa][tmpb] = 1;
		}

		for (int ii = 0; ii < m; ii++) {
			for (int iii = 0; iii < n; iii++) {

				

				if (vec[ii][iii] == 1 && visit[ii][iii] == 0) {
					q.push(make_pair(ii, iii));
					visit[ii][iii] = 1;
					count++;

				}
				else {
					continue;
				}

				while (!q.empty()) {
					cx = q.front().first;
					cy = q.front().second; q.pop();

					for (int iv = 0; iv < 4; iv++) {
						if (cx + nx[iv] >= 0 && cx + nx[iv] < m
							&& cy + ny[iv] >= 0 && cy + ny[iv] < n
							&& visit[cx + nx[iv]][cy + ny[iv]] == 0
							&& vec[cx + nx[iv]][cy + ny[iv]] == 1) {
							q.push(make_pair(cx + nx[iv], cy + ny[iv]));
							visit[cx + nx[iv]][cy + ny[iv]] = 1;
						}
					}
				}

			}
		}

		cout << count << endl;
	}


	return 0;
}
