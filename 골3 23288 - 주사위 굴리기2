//이 문제는 BFS + 단순 구현 + 머리에서 주사위 개굴려야 함
//정신만 차리고 천천히 하면 충분히 풀만한 문제ㅇㅇ -> 시간은 좀 걸림
//가장 오래 걸린 부분은 그 막혔을 때 반대로 가는 dir설정을 안했던 게 문제가 됐음ㅋㅋ찾는데 좀 걸림..ㅋㅋ...ㅠ

#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>;
using namespace std;

//(r,c) 
//- r은 북쪽으로부터 떨어진 칸의 개수
//- c는 서쪽으로부터 떨어진 칸의 개수
//
//가장 왼쪽 (1,1) / 가장 우측하단 (N,M)
//
//지도 위에 주사위 하나 놓여져 있으며, 주사위의 각 면에는 1~6
//주사위 한 면의 크기와 지도 한 칸의 크기는 같고

//초기 (1,1)에서 시작
//초기 이동 방향 - 동쪽







//입력 : 보드 크기(세로, 가로), 주사위 이동 횟수, 각 칸에 있는 정수
//출력 : 모두 이동했을 떄의 점수의 합


//풀이
//1. 
int one = 2, two = 4, three = 1, four = 3, five = 5, six = 6;
vector<vector<int>> maze;
void East() {
	swap(three, four);
	swap(three, six);
	swap(two, three);
}
void West() {
	swap(two, three);
	swap(three, six);
	swap(three, four);
}
void South() {
	swap(five, six);
	swap(three, five);
	swap(one, three);
}
void North() {
	swap(one, three);
	swap(three, five);
	swap(five, six);
}
int main() {

	int n, m, k;

	vector<int> tmpm;
	int tmp;

	cin >> n >> m >> k;

	//1. 지도 만들기
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> tmp;
			tmpm.push_back(tmp);
		}
		maze.push_back(tmpm);
		tmpm.clear();
	}

	
	int dir = 2; //1 - n, 2 - e, 3 - s, 4 - w

	int cx=0, cy=0;

	int nx[4] = { 0,1,0,-1 };
	int ny[4] = { 1,0,-1,0 };
	vector<vector<int>> visited(n, vector<int>(m, 0));
	queue<pair<int, int>> q;
	int ans = 0;
	int curx, cury;
	//2. 주사위 굴릴 횟수
	for (int i = 0; i < k; i++) {

		//1. 주사위 이동 방향으로 한 칸ㄱㄱ - 만약 이동 방향에 칸이 없다면
		// 이동 방향 반대 후 한 칸 구르기
		switch (dir)
		{
		case 2: // East
			if (cy + 1 == m) {
				cy--;
				dir = 4;
				West();
			}
			else {
				cy++;
				East();
			}
			break;
		case  4: // West
			if (cy - 1 < 0) {
				cy++;
				dir = 2;
				East();
			}
			else {
				cy--;
				West();
			}
			break;
		case 3: // South
			if (cx + 1 == n) {
				cx--;
				dir = 1;
				North();
			}
			else {
				cx++;
				South();
			}
			break;
		case 1: // North
			if (cx - 1 < 0) {
				cx++;
				dir = 3;
				South();
			}
			else {
				cx--;
				North();
			}
			break;
		default:
			break;
		}

		vector<vector<int>> visited(n, vector<int>(m, 0));
		int cnt = 0;
		q.push(make_pair(cx, cy));
		cnt++;
		visited[cx][cy] = 1;
		//점수 구하는 법
		//이동한 칸에서 동서남북으로 현재 칸의 값과 같은 값을 가지는 수 모두 구하기(BFS)
		//이후 현재 칸의 수 * 이동한 칸의 수
		while (!q.empty()) {
			curx = q.front().first;
			cury = q.front().second;
			q.pop();

			for (int i = 0; i < 4; i++) {
				if (curx + nx[i] >= 0 && curx + nx[i] < n
					&& cury + ny[i] >= 0 && cury + ny[i] < m
					&& visited[curx + nx[i]][cury + ny[i]] == 0
					&& maze[curx + nx[i]][cury + ny[i]] == maze[cx][cy]) {
					cnt++;
					q.push(make_pair(curx + nx[i], cury + ny[i]));
					visited[curx + nx[i]][cury + ny[i]] = 1;
				}
			}
		}
		ans += maze[cx][cy] * cnt;


		//2. 주사위 아랫면 정수 A와 주사위가 있는 칸(x,y)에 있는 정수 B를 비교해 이동 방향 결정
		//2-1. A > B -> 이동 방향 90도 회전(시계 방향)
		if (six > maze[cx][cy]) {
			if (dir < 4) {
				dir++;
			}
			else {
				dir = 1;
			}
		}
		//2-2. A < B -> 이동 방향 90도 회전(반시계 방향)
		else if (six < maze[cx][cy]){
			if (dir > 1) {
				dir--;
			}
			else {
				dir = 4;
			}
		}
		//2-3. A = B -> 이동 방향 변화 X
		/*cout << one << "\n" << two << three << four;
		cout << "\n" << five << "\n"<< six << "\n\n";*/
	}

	cout << ans;
	return 0;
}

