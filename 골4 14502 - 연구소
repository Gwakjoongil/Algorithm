//이 문제는 구현 문제
//백트래킹 기본 개념과 BFS를 문제없이 구현 가능하다면 충분히 풀만한 문제였음.
#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>;
using namespace std;

int n, m;
int zeroCount = 0;
void BFS(vector<vector<int>>& maze) {
	int cnt = 0;
	vector<vector<int>> visited(n, vector<int>(m, 0));
	int nx[4] = { 0,1,0,-1 };
	int ny[4] = { 1,0,-1,0 };
	int cx, cy;
	queue<pair<int, int>> q;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (maze[i][j] == 2) {
				q.push(make_pair(i, j));
				visited[i][j] = 1;
				while (!q.empty()) {
					cx = q.front().first;
					cy = q.front().second;
					q.pop();
					for (int k = 0; k < 4; k++) {
              if (nx[k] + cx >= 0 && nx[k] + cx < maze.size()
							&& ny[k] + cy >= 0 && ny[k] + cy < maze[0].size()
							&& visited[nx[k] + cx][ny[k] + cy] == 0
							&& maze[nx[k] + cx][ny[k] + cy] == 0) {
							visited[nx[k] + cx][ny[k] + cy] = 1;
							q.push(make_pair(nx[k] + cx, ny[k] + cy));
						}
					}

				}
			}
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (maze[i][j] == 0 && visited[i][j] == 0) {
				cnt++;
			}
		}
	}

	zeroCount = max(zeroCount, cnt);
}
void backTracking(vector<vector<int>>& maze, int count, int cx, int cy) {
	if (count == 3) {
		BFS(maze);
		return;
	}

	//j 초기값 GPT 도움ㅠ 알고는 있었는데 ㄲㄲ...
	for (int i = cx; i < maze.size(); i++) {
		for (int j = (i == cx ? cy : 0); j < maze[0].size(); j++) {
			if (maze[i][j] == 0 && count < 3 ) {
				maze[i][j] = 1;
				count++;
				backTracking(maze, count, i, j);
				count--;
				maze[i][j] = 0;
			 }
		}
	}

}

int main() {
	cin >> n >> m;
	vector<vector<int>> maze;
	vector<int> tmpmaze;

	int tmpval;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> tmpval;
			tmpmaze.push_back(tmpval);
		}
		maze.push_back(tmpmaze);
		tmpmaze.clear();
	}

	backTracking(maze, 0, 0, 0);
	cout << zeroCount;
	return 0;
}
