//n과 left, right가 주어질 때 n은 다음과 같은 규칙을 갖는다
//n = 3 -> vector<int> tmp = {1,2,3,2,2,3,3,3,3};
// 1 2 3
// 2 2 3
// 3 3 3
//여기서 tmp는 이해를 위한 것임
// tmp 배열을 만들 게 되면 시간 초과가 발생하기 때문에 규칙을 찾아 left ~ right까지의 값을 answer 벡터에 담아 return해야 한다.

//찾은 규칙은 다음과 같다
// left부터 right까지 1씩 증가
// i/n == 0일때는 나눴을 때 값에서 1 증가((i%n) +1)시키면 원하는 값이 된다.
// 0 이상일 때는 (i/n)-(i%n) >0 과 (i/n)-(i%n) < 0 인 구간으로 나눈다.
// 0 보다 작으면 (i/n)-(i%n)에 기존 ((i%n) +1)값을 더해주면 된다.
// 0 보다 크면 그냥 ((i%n) +1)을 넣어주면 된다.
// 그리고 범위가 long long이기에 for문의 i를 long long으로 선언해준다.
// 그렇지 않으면 시간 초과가 발생한다.

//ex
// '/' : 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 ..
// '%' : 0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 ..
// tmp : 1 2 3 4 5 2 2 3 4 5 3 3 3 4 5 ..
// 증가: 1 0 0 0 0 2 1 0 0 0 3 2 0 0 0 ..

#include <string>
#include <vector>

using namespace std;

vector<int> solution(int n, long long left, long long right) {
    vector<int> answer;
    
    for(int i=left;i<=right;i++){
        if(i/n > 0){
            if((i/n)-(i%n) > 0){
                answer.push_back(((i/n)-(i%n)) + (i%n + 1));                
            }
            else{
                answer.push_back(i%n + 1);    
            }

        }
        else{
            answer.push_back(i%n + 1);
        }
    }
    return answer;
}
