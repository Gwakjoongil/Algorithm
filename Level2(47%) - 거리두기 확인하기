//이 문제는 단순 구현이긴 한데
//조건 자체가 더러워서 코드도 더러워짐
//정신줄 놓으면 바로 틀릴 문제라는 거..ㅋ
//하튼 맞춤!

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <queue>

using namespace std;

vector<int> solution(vector<vector<string>> places) {
    vector<int> answer;
    int cx, cy;
    int nx[4] = {0,1,0,-1};
    int ny[4] = {1,0,-1,0};
    
    //대기실 수
    for(int i=0;i<places.size();i++){
        vector<pair<int, int>> vec;
        //1. 응시자 위치 구하기
        for(int j=0;j<places[i].size();j++){
            for(int k=0;k<places[i][j].length();k++){
                if(places[i][j][k] == 'P'){
                    vec.push_back(make_pair(j,k));
                }
            }
        }
         int tmpans = 1;
        //2. 응시자 간 거리 구하기
        for(int j=0;j<vec.size();j++){
            for(int k=j+1;k<vec.size();k++){
                //맨해튼 거리 구하기
                int tmpa = vec[j].first - vec[k].first;
                int tmpb = vec[j].second - vec[k].second;
                int tot=0;
                
                if(tmpa < 0) tmpa *= -1;
                if(tmpb < 0) tmpb *= -1;
                tot = tmpa+tmpb;
                
                //2-1. 응시자 간 맨해튼 거리가 2 이하이면
                //기준점부터 BFS 수행해서 중간에 파티션 있는지 확인
                if(tot <= 2){
                    queue<pair<int, int>> q;
                    q.push(make_pair(vec[j].first, vec[j].second));
                    int tmptot=0;
                    int visit[5][5] = {0};
                    while(!q.empty()){
                        cx = q.front().first;
                        cy = q.front().second; q.pop();
                        
                        //파티션 있으면 넘기기
                        if(places[i][cx][cy] == 'X'){
                            continue;
                        }
                        //파티션은 없는데 방향이 다름
                        //그래서 검사 위치(맨해튼 거리)를 벗어나면 컨티뉴
                        //맨해튼 거리 다시 구하기
                        tmpa = vec[j].first - cx;
                        tmpb = vec[j].second - cy;
                        if(tmpa < 0) tmpa *= -1;
                        if(tmpb < 0) tmpb *= -1;
                        tmptot = tmpa+tmpb;
                        
                        if(tmptot > 2){
                            continue;
                        }
                        
                        //파티션없고 거기서 발견됐다면 종료
                        if(cx == vec[k].first && cy == vec[k].second){
                            tmpans = 0;
                            break;
                        }
                        
                        
                        //그것도 아니면 상하좌우로 움직여보기
                        for(int l=0;l<4;l++){
                            if(cx+nx[l] >= 0 && cx+nx[l] < places[i].size() && cy+ny[l] >= 0 && cy+ny[l] < places[i][j].length())
                            {
                                if(visit[cx+nx[l]][cy+ny[l]] == 0){
                                    q.push(make_pair(cx+nx[l], cy+ny[l]));                                       visit[cx+nx[l]][cy+ny[l]] = 1;
                                }

                            }

                        }
                        
                    }
                }
                if(tmpans==0) break;
            }
           
            if(tmpans==0) break;
        }
        answer.push_back(tmpans);
        
        
        // for(int j=0;j<vec.size();j++){
        //     cout<<vec[j].first<<" "<<vec[j].second<<endl;
        // }
       // break;
    }
    
    return answer;
}
