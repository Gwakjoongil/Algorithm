//2024.01.01은 월요일
//SUN, MON, TUE, WED, THU, FRI, SAT, SUN
//연도가 주어졌을 때(year>=2024) 해당 연도와 요일이 일치한 월끼리 묶어 문자열 벡터로 반환하는 문제
//윤년 처리해야 하며 2100, 2200 등의 연도도 윤년으로 처리한다.
//윤년 - 4의 배수로 나누어 지는 연도이며 해당 연도의 2월은 29일이다.(기본 28일)
//31 - 1, 3, 5, 7, 8, 10, 12
//30 - 4, 6, 9, 11
//28 or 29 - 2

//이 문제의 풀이 과정은 다음과 같다.
//1. 연도의 1월 1일이 무슨 요일인지 알아내기
//2. 각 월별로 시작 요일 알아내기

#include <string>
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
	int year;
	cin >> year;
	//1번 해결 과정은 다음과 같다.
	//1. 1년은 365 or 366일
	//2. 365일이면 기본 요일에서 1일만 추가된 요일(일 -> 월)
	//3. 366일이면 기본 요일에서 2일 추가된 요일(일 -> 화)
	//4. 즉, 우리는 2024년의 요일을 알고 있으며 2024년도는 윤년이다.
	//5. 여기서 알 수 있는 건 2024 앞으로 오는 수가 4의 배수이면 윤년이라는 거다.
	//6. 주어진 연도에서 2024를 빼고 a에 저장
	//7. (a/4)+1을 b에 저장(1은 2024윤년) 후 c = (a+b)%7을 하게 되면 c에는 총 지나간 요일이 저장된다.
  //8. 이를 바탕으로 기본 요일에서 c를 더해 기준 요일을 설정한다.

  int a = year - 2024;
	int b = (a / 4) + 1;
	int c = (a + b) % 7;
	int base = 1 + c; //월
	
	
	//2번 해결 과정은 다음과 같다.
	//1. 우리는 28, 29, 30, 31일을 갖게 되는 월의 다음 월이 무슨 요일인지 알아야 한다.
	//2. 7로 나눠보면 간단하다.
	//- 28 % 7 -> +0
	//- 29 % 7 -> +1
	//- 30 % 7 -> +2
	//- 31 % 7 -> +3
	//3. 즉 우리는 각 월이 며칠인지 알고 있고 그 일 수의 다음 월은 무슨 요일인지 알 수 있으니 이대로 풀면 된다.

	vector<string> answer(7);
	for (int i = 1; i <= 12; i++) {
		answer[base] += to_string(i) + " ";
		//31 - 1, 3, 5, 7, 8, 10, 12
		//30 - 4, 6, 9, 11
		//28 or 29 - 2
		switch (i)
		{
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			base += 3;
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			base += 2;
			break;
		case 2:
			if (year % 4 == 0) { base += 1; }
			break;
		default:
			break;
		}
		base %= 7;
	}

	for (int i = 0; i < answer.size(); i++) {
		answer[i].erase(answer[i].begin() + answer[i].length() - 1);
	}

	for (int i = 0; i < answer.size(); i++) {
		for (int j = 0; j < answer[i].length(); j++) {
			cout << answer[i][j];
		}
		cout << endl;
	}

	return 0;
}
